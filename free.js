// free.js - Free Response Questions with AI Validation

// Helper function to save wrong answers to flashlight
function saveWrongAnswer(answer, word) {
  try {
    const wrongAnswers = JSON.parse(localStorage.getItem('wrongAnswers') || '[]');
    wrongAnswers.push({
      answer: answer,
      word: word,
      timestamp: new Date().toISOString(),
      feedback: null  // Will be generated by AI in flashlight.html
    });
    localStorage.setItem('wrongAnswers', JSON.stringify(wrongAnswers));
  } catch (error) {
    console.error('Error saving wrong answer:', error);
  }
}

// Generate free response questions
async function generateFreeQuestions(words) {
  const questions = [];
  
  for (const word of words) {
    const question = {
      type: 'free_response',
      word: word.english,
      text: `Make a sentence using the word "${word.english}"`,
      telugu: word.telugu || ''
    };
    questions.push(question);
  }
  
  return questions;
}

// Set up free response question in the UI
function setupFreeResponseQuestion(question, answerArea) {
  const container = document.createElement('div');
  container.style.width = '100%';
  
  // Show Telugu translation if available
  if (question.telugu) {
    const teluguHint = document.createElement('div');
    teluguHint.textContent = `Telugu: ${question.telugu}`;
    teluguHint.style.fontSize = '14px';
    teluguHint.style.color = '#666';
    teluguHint.style.marginBottom = '10px';
    container.appendChild(teluguHint);
  }
  
  // Create textarea
  const textarea = document.createElement('textarea');
  textarea.id = 'freeResponseAnswer';
  textarea.className = 'text-input';
  textarea.placeholder = 'Type your sentence here...';
  textarea.rows = 3;
  textarea.style.width = '100%';
  textarea.style.minHeight = '80px';
  textarea.style.resize = 'vertical';
  
  container.appendChild(textarea);
  answerArea.appendChild(container);
  
  // Focus textarea
  setTimeout(() => textarea.focus(), 100);
}

// Check free response answer
async function checkFreeResponseAnswer(question) {
  const feedback = document.getElementById('feedback');
  const textarea = document.getElementById('freeResponseAnswer');
  const userSentence = textarea ? textarea.value.trim() : '';
  
  if (!userSentence) {
    feedback.textContent = 'Please write a sentence';
    feedback.className = 'feedback incorrect';
    isAnswerCorrect = false;
    return;
  }
  
  try {
    // Call AI to validate the sentence
    const validation = await validateSentenceWithAI(userSentence, question.word);
    
    if (validation.isCorrect) {
      feedback.textContent = '✓ Correct! Well done!';
      feedback.className = 'feedback correct';
      isAnswerCorrect = true;
    } else {
      feedback.textContent = '✗ Incorrect. Click Next to see hints.';
      feedback.className = 'feedback incorrect';
      isAnswerCorrect = false;

      // Save wrong answer to flashlight
      saveWrongAnswer(userSentence, word);

      // Store data for hints page
      sessionStorage.setItem('hintsData', JSON.stringify({
        word: question.word,
        telugu: question.telugu,
        userSentence: userSentence,
        explanation: validation.explanation,
        examples: validation.examples
      }));
      
      // Modify next button to show hints overlay
      const nextBtn = document.getElementById('nextBtn');
      if (nextBtn) {
        nextBtn.onclick = () => {
          showHintsOverlay();
        };
      }
    }
  } catch (error) {
    console.error('Error checking sentence:', error);
    
    // Fallback validation
    const hasWord = userSentence.toLowerCase().includes(question.word.toLowerCase());
    
    if (hasWord && userSentence.split(' ').length >= 3) {
      feedback.textContent = '✓ Your sentence contains the word.';
      feedback.className = 'feedback correct';
      isAnswerCorrect = true;
    } else {
      feedback.textContent = '✗ Please make sure your sentence contains the word and is complete.';
      feedback.className = 'feedback incorrect';
      isAnswerCorrect = false;
    }
  }
}

// Validate sentence with AI
async function validateSentenceWithAI(sentence, word) {
  try {
    const prompt = `You are evaluating a Grade 3 student's sentence. Be encouraging and lenient.
    
    Word to use: "${word}"
    Student's sentence: "${sentence}"

    You are a grammar checker. Your task is to decide if the input sentence is grammatically correct in standard English and whether the word "${word}" is used correctly. 

Rules:
- If the target word is NOT present in the sentence, mark isCorrect as false.  
- If the target word IS present, check if it is used correctly in grammar and meaning.  
- Do not consider style, tone, or naturalness.  
- The sentence must also have clear semantic meaning (nonsense sentences are incorrect even if grammatically formed).  

  
    Format your response as JSON:
    {
      "isCorrect": true/false,
      "explanation": "brief explanation only if incorrect",
      "examples": ["example1", "example2", "example3"]
    }`;
    
    // Use local AI via Electron API
    if (!window.electronAPI || !window.electronAPI.aiInference) {
      console.error('AI is not available - electronAPI not found');
      throw new Error('AI is not available. Please run the desktop app.');
    }

    console.log('Calling AI for sentence validation...');
    const content = await window.electronAPI.aiInference(prompt);
    console.log('AI validation response received');
    
    // Parse JSON response
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    // Fallback parsing
    const isCorrect = content.toLowerCase().includes('"iscorrect": true') || 
                     content.toLowerCase().includes('"iscorrect":true');
    
    return {
      isCorrect: isCorrect,
      explanation: isCorrect ? '' : 'The sentence needs improvement.',
      examples: []
    };
    
  } catch (error) {
    console.error('AI validation error:', error);
    throw error;
  }
}

// Show hints overlay
function showHintsOverlay() {
  const overlay = document.getElementById('hintsOverlay');
  if (!overlay) return;
  
  // Create iframe if not exists
  let iframe = overlay.querySelector('iframe');
  if (!iframe) {
    iframe = document.createElement('iframe');
    iframe.src = 'hints.html';
    overlay.appendChild(iframe);
  } else {
    // Reload hints
    iframe.src = 'hints.html';
  }
  
  // Show overlay with animation
  overlay.style.display = 'block';
  setTimeout(() => {
    overlay.classList.add('show');
  }, 10);
  
  // Listen for messages from hints
  window.addEventListener('message', handleHintsMessage);
}

// Handle messages from hints iframe
function handleHintsMessage(event) {
  if (event.data && event.data.type === 'hintsComplete') {
    closeHintsOverlay(true);
  } else if (event.data && event.data.type === 'hintsFailed') {
    closeHintsOverlay(false);
  }
}

// Close hints overlay
function closeHintsOverlay(success) {
  const overlay = document.getElementById('hintsOverlay');
  if (!overlay) return;
  
  // Remove message listener
  window.removeEventListener('message', handleHintsMessage);
  
  // Hide overlay with animation
  overlay.classList.remove('show');
  
  setTimeout(() => {
    overlay.style.display = 'none';
    
    // Update UI based on result
    const feedback = document.getElementById('feedback');
    const nextBtn = document.getElementById('nextBtn');
    
    if (success) {
      isAnswerCorrect = true;
      if (feedback) {
        feedback.textContent = '✓ Great job! You completed the hints exercise.';
        feedback.className = 'feedback correct';
      }
    } else {
      isAnswerCorrect = false;
      if (feedback) {
        feedback.textContent = '✗ This word has been marked as hard for more practice.';
        feedback.className = 'feedback incorrect';
      }
    }
    
    // Restore next button
    if (nextBtn) {
      nextBtn.onclick = nextQuestion;
    }
  }, 500);
}